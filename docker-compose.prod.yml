version: "3.9"

volumes:
  db-store:
  psysh-store:
  traefik_acme:
  app-data:

networks:
  internal:
    driver: bridge
  public:
    driver: bridge
    external: true

services:
  traefik:
    image: "traefik:v2.9"
    restart: unless-stopped
    command:
      # - "--accesslog=true"
      # - "--accesslog.format=json"
      # - "--accesslog.filepath=/dev/stdout"
      - "--log.level=DEBUG"
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=public"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      #- "--certificatesresolvers.letsencrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.letsencrypt.acme.email=lendr@techstackapps.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    networks:
      - public
    volumes:
      - traefik_acme:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro

  app:
    build:
      context: .
    restart: unless-stopped
    volumes:
      - app-data:/data/
      - ./src/storage/app:/data/storage/app
    ports:
      - "9000:9000"
    networks:
      - internal
      - public
    environment:
      - XDEBUG_SESSION=1
    env_file:
      - env/app.env
  
  web:
    image: nginx:stable-alpine
    restart: unless-stopped
    environment:
      - TZ=UTC
    volumes:
      - app-data:/data
      - "./infra/docker/nginx/default.conf:/etc/nginx/conf.d/default.conf"
    networks:
      - public
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`lendrapp.shop`) && PathPrefix(`/`)"
      - "traefik.http.routers.web.entrypoints=websecure"
      - "traefik.http.routers.web.tls.certresolver=letsencrypt"
      - "traefik.http.routers.web.middlewares=web-cors@docker"
      - "traefik.http.middlewares.web-cors.headers.accesscontrolallowmethods=OPTIONS,GET,POST,PUT,PATCH,DELETE"
      - "traefik.http.middlewares.web-cors.headers.accesscontrolallowheaders=Accept,Accept-Language,Content-Language,Content-Type,Referer,User-Agent,Authorization,X-Csrf-Token"
      - "traefik.http.middlewares.web-cors.headers.accesscontrolallowcredentials=true"
      - "traefik.http.middlewares.web-cors.headers.accesscontrolalloworiginlist=http://lendrapp.shop"
      - "traefik.http.middlewares.web-cors.headers.accesscontrolexposeheaders=Cache-Control,Expires,Last-Modified,Pragma,Content-Language,Content-Type,Content-Length,Location"
      - "traefik.http.middlewares.web-cors.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.web-cors.headers.addvaryheader=true"

  db:
    build:
      context: .
      dockerfile: ./infra/docker/mysql/Dockerfile
    restart: unless-stopped
    env_file:
      - env/db.env
    networks:
      - internal
    volumes:
      - type: volume
        source: db-store
        target: /var/lib/mysql
        volume:
          nocopy: true
    healthcheck:
      test: ["CMD", "mysqladmin", "-u$$MYSQL_USER", "-p$$MYSQL_PASSWORD", "ping", "--silent"]
  
  redis:
    image: "redis:alpine"
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
    logging:
      driver: json-file
      options:
        max-size: "1000k"
        max-file: "2"
    container_name: redis
    sysctls:
      net.core.somaxconn: '1024'
    restart: unless-stopped
    command: /bin/sh -c "redis-server --requirepass $$REDIS_PASSWORD"
    env_file:
    - env/redis.env
    networks:
      - internal

  horizon:
    build:
      context: .
    restart: unless-stopped
    networks:
      - internal
    command: 'php /data/artisan horizon'
    volumes:
      - ./logs/horizon:/data/storage/logs:delegated
    env_file:
      - data/conf/env/horizon.env
    logging:
      driver: json-file
      options:
        max-size: "1000k"
        max-file: "2"

  artisan:
    build:
      context: .
    volumes:
      - ./src:/data:delegated
    depends_on:
      - db
    working_dir: /data
    entrypoint: [ 'php', '/data/artisan' ]
    networks:
      - internal